const http = require('http');

function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (error) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function monitorCrazyTime() {
  console.log('üéÆ –ú–û–ù–ò–¢–û–†–ò–ù–ì CRAZY TIME –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò');
  console.log('=' * 50);
  console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');
  console.log('üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö');
  console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
  
  let previousTotal = 0;
  let checkCount = 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  try {
    const initialResponse = await makeRequest('GET', '/api/casinos');
    if (initialResponse.status === 200 && initialResponse.data.success) {
      previousTotal = initialResponse.data.data.casinos.length;
      console.log(`üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${previousTotal}`);
      
      if (previousTotal > 0) {
        console.log('üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Crazy Time:');
        initialResponse.data.data.casinos.slice(0, 3).forEach((casino, index) => {
          console.log(`   ${index + 1}. ${casino.name} - ${casino.score}/10 (${casino.stats?.multiplier || 'N/A'}x)`);
        });
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
  
  console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  const interval = setInterval(async () => {
    try {
      checkCount++;
      const currentTime = new Date().toLocaleTimeString();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const response = await makeRequest('GET', '/api/casinos');
      
      if (response.status === 200 && response.data.success) {
        const currentTotal = response.data.data.casinos.length;
        const casinos = response.data.data.casinos;
        
        console.log(`[${currentTime}] –ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount}:`);
        console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${currentTotal}`);
        
        if (currentTotal > previousTotal) {
          const newRecords = currentTotal - previousTotal;
          console.log(`   ‚úÖ –ù–û–í–´–ï –î–ê–ù–ù–´–ï! –î–æ–±–∞–≤–ª–µ–Ω–æ ${newRecords} –∑–∞–ø–∏—Å–µ–π`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
          const latestRecords = casinos.slice(0, newRecords);
          console.log(`   üÜï –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏:`);
          latestRecords.forEach((casino, index) => {
            const multiplier = casino.stats?.multiplier || 'N/A';
            const rounds = casino.stats?.rounds || 'N/A';
            console.log(`      ${index + 1}. ${casino.name}`);
            console.log(`         üéØ –†–µ–π—Ç–∏–Ω–≥: ${casino.score}/10`);
            console.log(`         üé∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}x`);
            console.log(`         üîÑ –†–∞—É–Ω–¥–æ–≤: ${rounds}`);
          });
          
          previousTotal = currentTotal;
          
        } else if (currentTotal === previousTotal) {
          console.log(`   ‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          if (casinos.length > 0) {
            const latest = casinos[0];
            const updateTime = new Date(latest.scrapedAt || latest.createdAt).toLocaleTimeString();
            console.log(`   üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateTime}`);
            console.log(`   üéÆ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: ${latest.name} (${latest.score}/10)`);
          }
          
        } else {
          console.log(`   üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —É–º–µ–Ω—å—à–∏–ª–æ—Å—å: ${previousTotal} ‚Üí ${currentTotal}`);
          console.log(`   üßπ –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
          previousTotal = currentTotal;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        if (casinos.length > 0) {
          const top3 = casinos
            .sort((a, b) => (b.score || 0) - (a.score || 0))
            .slice(0, 3);
          
          console.log(`   üèÜ –¢–æ–ø-3 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:`);
          top3.forEach((casino, index) => {
            const multiplier = casino.stats?.multiplier || 'N/A';
            console.log(`      ${index + 1}. ${casino.score}/10 - ${multiplier}x - ${casino.name}`);
          });
        }
        
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${response.status}`);
      }
      
      console.log('');
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:`, error.message);
    }
  }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
  process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Crazy Time...');
    clearInterval(interval);
    process.exit(0);
  });
}

console.log('üéÆ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Crazy Time...\n');
monitorCrazyTime().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
