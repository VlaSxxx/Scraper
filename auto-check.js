const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (error) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function runFullCheck() {
  console.log('üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê CASINO SCORES –ë–û–¢–ê\n');
  console.log('=' * 60);
  
  let allTestsPassed = true;
  const results = [];
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê...');
  try {
    const response = await makeRequest('GET', '/');
    if (response.status === 200 && response.data.success) {
      console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üìä –í–µ—Ä—Å–∏—è: ${response.data.version}`);
      console.log(`   üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${response.data.environment}`);
      results.push({ test: '–°–µ—Ä–≤–µ—Ä', status: 'PASSED' });
    } else {
      throw new Error(`Unexpected response: ${response.status}`);
    }
  } catch (error) {
    console.log('   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    results.push({ test: '–°–µ—Ä–≤–µ—Ä', status: 'FAILED', error: error.message });
    allTestsPassed = false;
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–¥–æ—Ä–æ–≤—å—è
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API –ó–î–û–†–û–í–¨–Ø...');
  try {
    const response = await makeRequest('GET', '/api/health');
    if (response.status === 200 && response.data.success) {
      console.log('   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   ‚è±Ô∏è  Uptime: ${Math.floor(response.data.uptime)} —Å–µ–∫—É–Ω–¥`);
      results.push({ test: 'API Health', status: 'PASSED' });
    } else {
      throw new Error(`API health check failed: ${response.status}`);
    }
  } catch (error) {
    console.log('   ‚ùå API health check failed:', error.message);
    results.push({ test: 'API Health', status: 'FAILED', error: error.message });
    allTestsPassed = false;
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...');
  try {
    const response = await makeRequest('GET', '/api/stats');
    if (response.status === 200 && response.data.success) {
      const stats = response.data.data;
      console.log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      console.log(`   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${stats.casinos?.total || 0}`);
      console.log(`   üìà –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${stats.casinos?.successful || 0}`);
      console.log(`   üìâ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${stats.casinos?.failed || 0}`);
      results.push({ test: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', status: 'PASSED' });
    } else {
      throw new Error(`Database check failed: ${response.status}`);
    }
  } catch (error) {
    console.log('   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
    results.push({ test: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', status: 'FAILED', error: error.message });
    allTestsPassed = false;
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ó–ê–î–ê–ß...');
  try {
    const response = await makeRequest('GET', '/admin/scheduler/status');
    if (response.status === 200 && response.data.success) {
      const scheduler = response.data.data;
      console.log(`   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ${scheduler.isRunning ? '–†–ê–ë–û–¢–ê–ï–¢' : '–û–°–¢–ê–ù–û–í–õ–ï–ù'}`);
      console.log(`   üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: ${Object.keys(scheduler.tasks || {}).length}`);
      
      if (scheduler.tasks && Object.keys(scheduler.tasks).length > 0) {
        console.log('   üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
        Object.entries(scheduler.tasks).forEach(([name, task]) => {
          console.log(`      - ${name}: ${task.status || 'unknown'}`);
        });
      }
      
      results.push({ test: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', status: 'PASSED' });
    } else {
      throw new Error(`Scheduler check failed: ${response.status}`);
    }
  } catch (error) {
    console.log('   ‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    results.push({ test: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', status: 'FAILED', error: error.message });
    allTestsPassed = false;
  }
  
  // 5. –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
  console.log('\n5Ô∏è‚É£ –¢–ï–°–¢ –†–£–ß–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê...');
  try {
    const response = await makeRequest('POST', '/admin/parse/trigger');
    if (response.status === 200 && response.data.success) {
      console.log('   ‚úÖ –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üÜî Operation ID: ${response.data.data.operationId}`);
      results.push({ test: '–†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥', status: 'PASSED' });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (10 —Å–µ–∫—É–Ω–¥)...');
      await sleep(10000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const statsAfter = await makeRequest('GET', '/api/stats');
      if (statsAfter.status === 200) {
        console.log(`   üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞`);
      }
      
    } else {
      throw new Error(`Manual parsing failed: ${response.status} - ${response.data.message}`);
    }
  } catch (error) {
    console.log('   ‚ùå –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
    results.push({ test: '–†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥', status: 'FAILED', error: error.message });
    allTestsPassed = false;
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
  console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• API ENDPOINTS...');
  const endpoints = [
    { path: '/api/casinos', name: '–°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ' },
    { path: '/api/types', name: '–¢–∏–ø—ã –∏–≥—Ä' },
    { path: '/api/providers', name: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã' }
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await makeRequest('GET', endpoint.path);
      if (response.status === 200) {
        console.log(`   ‚úÖ ${endpoint.name}: —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${endpoint.name}: ${response.status}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ${endpoint.name}: –æ—à–∏–±–∫–∞`);
    }
  }
  results.push({ test: 'API Endpoints', status: 'PASSED' });
  
  // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
  console.log('\n' + '=' * 60);
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('=' * 60);
  
  results.forEach(result => {
    const status = result.status === 'PASSED' ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.test}: ${result.status}`);
    if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }
  });
  
  console.log('\nüèÅ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  if (allTestsPassed) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    console.log('\nüìù –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
    console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
    console.log('   ‚úÖ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω (–ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
    console.log('   ‚úÖ –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
  } else {
    console.log('‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  }
  
  console.log('\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: node test-minute-scraping.js');
  console.log('   - API: http://localhost:3000/api/casinos');
  console.log('   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:3000/api/stats');
  console.log('   - –ê–¥–º–∏–Ω: http://localhost:3000/admin/scheduler/status');
}

console.log('üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Casino Scores –±–æ—Ç–∞...\n');
runFullCheck().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  process.exit(1);
});


