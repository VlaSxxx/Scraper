const { connectDB } = require('./src/config/database');
const CasinoScore = require('./src/models/CasinoScore');

async function updateCrazyTimeData() {
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Crazy Time...');
    console.log('‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É');
    console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(async () => {
      try {
        const timestamp = new Date().toLocaleTimeString();
        const multiplier = Math.floor(Math.random() * 2000) + 100;
        const rounds = Math.floor(Math.random() * 50) + 50;
        const score = (Math.random() * 2 + 8).toFixed(1); // 8.0 - 10.0
        
        const newData = {
          name: `Crazy Time Live - ${timestamp}`,
          url: 'https://live-casino.com/crazy-time',
          type: 'game show',
          description: `Live Crazy Time session updated at ${timestamp}`,
          provider: 'evolution',
          score: parseFloat(score),
          rating: score >= 9.0 ? 'Excellent' : 'Very Good',
          features: ['live', 'game show', 'wheel', 'real-time'],
          isLive: true,
          mobileCompatible: true,
          liveChat: true,
          stats: { 
            multiplier: multiplier,
            rounds: rounds,
            lastUpdate: new Date()
          }
        };
        
        const casino = new CasinoScore(newData);
        await casino.save();
        
        console.log(`üéÆ [${timestamp}] –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Crazy Time:`);
        console.log(`   üìä –†–µ–π—Ç–∏–Ω–≥: ${score}/10`);
        console.log(`   üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}x`);
        console.log(`   üîÑ –†–∞—É–Ω–¥–æ–≤: ${rounds}`);
        console.log('');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        const totalCount = await CasinoScore.countDocuments({ type: 'game show' });
        if (totalCount > 10) {
          const oldestRecords = await CasinoScore.find({ type: 'game show' })
            .sort({ createdAt: 1 })
            .limit(totalCount - 10);
          
          for (const record of oldestRecords) {
            await CasinoScore.findByIdAndDelete(record._id);
          }
          console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${oldestRecords.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
      }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Crazy Time...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  process.exit(0);
});

updateCrazyTimeData();


