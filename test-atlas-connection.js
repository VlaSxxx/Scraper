require('dotenv').config({ path: './config.env' });
const { connectDB, getConnectionStats } = require('./src/config/database');

async function testAtlasConnection() {
  try {
    console.log('üåç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('=' * 40);
    
    const currentUri = process.env.MONGODB_URI;
    console.log(`üîó –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${currentUri.replace(/\/\/.*@/, '//***:***@')}`);
    
    if (currentUri.includes('localhost') || currentUri.includes('127.0.0.1')) {
      console.log('üìç –¢–∏–ø –±–∞–∑—ã: –õ–û–ö–ê–õ–¨–ù–ê–Ø MongoDB');
    } else if (currentUri.includes('mongodb.net')) {
      console.log('‚òÅÔ∏è –¢–∏–ø –±–∞–∑—ã: –û–ë–õ–ê–ß–ù–ê–Ø MongoDB Atlas');
    } else {
      console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã');
    }
    
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    const startTime = Date.now();
    await connectDB();
    const connectionTime = Date.now() - startTime;
    
    const stats = getConnectionStats();
    
    console.log('\n‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!');
    console.log('-' * 30);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connectionTime}ms`);
    console.log(`üè† –•–æ—Å—Ç: ${stats.host}`);
    console.log(`üîå –ü–æ—Ä—Ç: ${stats.port}`);
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${stats.name}`);
    console.log(`üîó –°—Ç–∞—Ç—É—Å: ${stats.readyState === 1 ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    const CasinoScore = require('./src/models/CasinoScore');
    const recordCount = await CasinoScore.countDocuments();
    console.log(`üìã –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${recordCount}`);
    
    if (recordCount > 0) {
      const latest = await CasinoScore.findOne().sort({ createdAt: -1 });
      console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: ${new Date(latest.createdAt).toLocaleString()}`);
      console.log(`üéÆ –ò–≥—Ä–∞: ${latest.name}`);
    }
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø!');
    console.error('-' * 30);
    console.error(`üí• –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`);
    
    if (error.message.includes('ENOTFOUND')) {
      console.error('üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    } else if (error.message.includes('authentication')) {
      console.error('üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } else if (error.message.includes('ECONNREFUSED')) {
      console.error('üîí –õ–æ–∫–∞–ª—å–Ω–∞—è MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
      console.error('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: mongod –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Atlas');
    }
    
    console.error('\nüõ†Ô∏è –†–ï–®–ï–ù–ò–Ø:');
    console.error('1. –î–ª—è Atlas: –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.error('2. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ MongoDB');
    console.error('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.env');
    
    process.exit(1);
  }
}

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ...\n');
testAtlasConnection();
