require('dotenv').config({ path: './config.env' });
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const { connectDB, getConnectionStats } = require('./config/database');
const apiRoutes = require('./routes/api');
const errorHandler = require('./middleware/errorHandler');
const TaskScheduler = require('./tasks/scheduler');
const taskRoutes = require('./routes/tasks');

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
const taskScheduler = new TaskScheduler();

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS
 */
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: {
    error: 'Too many requests from this IP, please try again later.',
    retryAfter: '15 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
app.use(limiter);

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å Helmet
 */
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
  crossOriginEmbedderPolicy: false,
}));

/**
 * –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
app.use(compression({
  level: 6,
  threshold: 1024,
  filter: (req, res) => {
    if (req.headers['x-no-compression']) {
      return false;
    }
    return compression.filter(req, res);
  }
}));

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
 */
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS ? process.env.ALLOWED_ORIGINS.split(',') : '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  credentials: true,
  maxAge: 86400 // 24 —á–∞—Å–∞
}));

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
 */
app.use(express.json({ 
  limit: '10mb',
  verify: (req, res, buf) => {
    try {
      JSON.parse(buf);
    } catch (e) {
      res.status(400).json({ error: 'Invalid JSON' });
      throw new Error('Invalid JSON');
    }
  }
}));

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –¥–∞–Ω–Ω—ã—Ö
 */
app.use(express.urlencoded({ 
  extended: true, 
  limit: '10mb',
  parameterLimit: 1000
}));

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
app.use((req, res, next) => {
  const start = Date.now();
  const { method, url, ip } = req;
  
  console.log(`üì• ${new Date().toISOString()} - ${method} ${url} from ${ip}`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  res.on('finish', () => {
    const duration = Date.now() - start;
    const { statusCode } = res;
    const statusEmoji = statusCode >= 400 ? '‚ùå' : statusCode >= 300 ? 'üîÑ' : '‚úÖ';
    
    console.log(`${statusEmoji} ${method} ${url} - ${statusCode} (${duration}ms)`);
  });
  
  next();
});

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
app.use((req, res, next) => {
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
  next();
});

/**
 * Health check endpoint —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
app.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    let dbStats = { isConnected: false, readyState: 0, host: null, name: null };
    try {
      dbStats = getConnectionStats();
    } catch (dbError) {
      console.log('Database stats not available:', dbError.message);
    }
    
    const uptime = process.uptime();
    const memoryUsage = process.memoryUsage();
    
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: {
        seconds: Math.floor(uptime),
        formatted: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m ${Math.floor(uptime % 60)}s`
      },
      database: {
        connected: dbStats.isConnected,
        readyState: dbStats.readyState,
        host: dbStats.host,
        name: dbStats.name,
        mode: dbStats.isConnected ? 'full' : 'fallback'
      },
      memory: {
        rss: `${Math.round(memoryUsage.rss / 1024 / 1024)}MB`,
        heapUsed: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
        heapTotal: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`
      },
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0'
    });
  } catch (error) {
    res.status(500).json({
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * API –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
 */
app.use('/api', apiRoutes); // API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.use('/api/tasks', taskRoutes); // –ó–∞–¥–∞—á–∏


/**
 * –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
 */
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'Casino Scores Scraper API',
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString(),
    endpoints: {
      // Casino API
      'GET /api/casinos': 'Get all casinos with pagination and filtering',
      'GET /api/casinos/:id': 'Get specific casino by ID',
      'GET /api/casinos/search/:name': 'Search casinos by name',
      'GET /api/stats': 'Get statistics about casinos',
      'GET /api/top-casinos': 'Get top rated casinos',
      'GET /api/health': 'Check API health',
      
      // Task Management
      'GET /api/tasks': 'Get all scheduled tasks status',
      'POST /api/tasks': 'Create new scheduled task',
      'POST /api/tasks/run': 'Run task once',
      'DELETE /api/tasks/:name': 'Stop specific task',
      'DELETE /api/tasks': 'Stop all tasks',
      'GET /api/tasks/stats': 'Get tasks statistics',
      'GET /api/tasks/:name/executions': 'Get task execution history',
      'GET /api/tasks/scraping-stats': 'Get scraping statistics',
      'POST /api/tasks/cleanup': 'Cleanup old data',
      'GET /api/tasks/health': 'Check tasks system health'
    },
    documentation: 'Check the README.md file for detailed API documentation',
    support: {
      email: process.env.SUPPORT_EMAIL || 'support@example.com',
      github: 'https://github.com/your-repo/casino-scraper'
    }
  });
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
 */
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Route not found',
    message: `The requested route ${req.originalUrl} does not exist`,
    timestamp: new Date().toISOString(),
    availableEndpoints: [
      'GET /',
      'GET /health',
      'GET /api/casinos',
      'GET /api/casinos/:id',
      'GET /api/casinos/search/:name',
      'GET /api/stats',
      'GET /api/top-casinos',
      'GET /api/health',
      'GET /api/tasks',
      'POST /api/tasks',
      'POST /api/tasks/run',
      'DELETE /api/tasks/:name',
      'DELETE /api/tasks',
      'GET /api/tasks/stats',
      'GET /api/tasks/:name/executions',
      'GET /api/tasks/scraping-stats',
      'POST /api/tasks/cleanup',
      'GET /api/tasks/health'
    ]
  });
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π)
 */
app.use(errorHandler);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
const startServer = async () => {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞)
    console.log('üîó Attempting to connect to database...');
    try {
      await connectDB();
      console.log('‚úÖ Database connected successfully');
    } catch (dbError) {
      console.warn('‚ö†Ô∏è  Database connection failed, continuing without database...');
      console.warn('üìä API will work in read-only mode, scraping data will not be saved');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Server running on port ${PORT}`);
      console.log(`üìä API available at http://localhost:${PORT}/api`);
      console.log(`üîç Health check at http://localhost:${PORT}/health`);
      console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
      if (process.env.NODE_ENV !== 'test') {
        const schedule = process.env.SCRAPING_INTERVAL || '* * * * *'; // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        taskScheduler.createScrapingJob(schedule, {
          name: 'casino-scraping',
          timezone: 'UTC',
          runOnInit: false
        });
        console.log(`‚è∞ Scheduled scraping job: ${schedule}`);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.on('error', (error) => {
      console.error('‚ùå Server error:', error);
      if (error.code === 'EADDRINUSE') {
        console.error(`Port ${PORT} is already in use`);
        process.exit(1);
      }
    });

    // Graceful shutdown
    const gracefulShutdown = async (signal) => {
      console.log(`\nüõë Received ${signal}, shutting down gracefully...`);
      
      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        taskScheduler.stopAllJobs();
        console.log('‚èπÔ∏è  All scheduled jobs stopped');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.close(() => {
          console.log('üîí Server closed');
          process.exit(0);
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          console.error('‚ùå Forced shutdown after timeout');
          process.exit(1);
        }, 10000);
        
      } catch (error) {
        console.error('‚ùå Error during graceful shutdown:', error);
        process.exit(1);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      gracefulShutdown('uncaughtException');
    });
    
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
      gracefulShutdown('unhandledRejection');
    });

  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = app;
