const { repositoryFactory } = require('../../repositories');
const { CasinoListDto, CasinoDetailDto } = require('../../dto');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∞–º–∏ –∫–∞–∑–∏–Ω–æ
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∑–∏–Ω–æ
 */
class CasinoScoreService {
  constructor() {
    this.repository = repositoryFactory.getCasinoScoreRepository();
    this.mockData = this.generateMockData();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ MongoDB
   */
  generateMockData() {
    return [
      {
        _id: '1',
        name: 'Crazy Time Live',
        type: 'game show',
        provider: 'evolution',
        score: 9.2,
        rating: 'Excellent',
        url: 'https://casinoscores.com/crazy-time',
        description: 'Live casino game show with multipliers and bonus rounds',
        scrapedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        isLive: true,
        mobileCompatible: true,
        liveChat: true,
        features: ['live dealer', 'multipliers', 'bonus rounds'],
        stats: {
          multipliers: [2, 5, 10, 20, 50],
          rtp: [96.08],
          rounds: [1000]
        }
      },
      {
        _id: '2',
        name: 'Monopoly Live',
        type: 'game show',
        provider: 'evolution',
        score: 8.8,
        rating: 'Excellent',
        url: 'https://casinoscores.com/monopoly-live',
        description: 'Board game inspired live casino game',
        scrapedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        isLive: true,
        mobileCompatible: true,
        features: ['live dealer', 'board game', 'properties'],
        stats: {
          multipliers: [500],
          rtp: [96.23],
          rounds: [500]
        }
      },
      {
        _id: '3',
        name: 'Lightning Roulette',
        type: 'roulette',
        provider: 'evolution',
        score: 8.5,
        rating: 'Good',
        url: 'https://example.com/lightning-roulette',
        description: 'Enhanced roulette with random multipliers',
        scrapedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        isLive: true,
        mobileCompatible: true,
        features: ['live dealer', 'multipliers', 'lightning'],
        stats: {
          multipliers: [50, 100, 200, 300, 400, 500],
          rtp: [97.30]
        }
      },
      {
        _id: '4',
        name: 'Dream Catcher',
        type: 'wheel',
        provider: 'evolution',
        score: 7.8,
        rating: 'Good',
        url: 'https://example.com/dream-catcher',
        description: 'Money wheel game with live host',
        scrapedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        isLive: true,
        features: ['live dealer', 'wheel'],
        stats: {
          multipliers: [2, 5, 10, 20, 40],
          rtp: [96.58]
        }
      },
      {
        _id: '5',
        name: 'Blackjack VIP',
        type: 'blackjack',
        provider: 'evolution',
        score: 8.9,
        rating: 'Excellent',
        url: 'https://example.com/blackjack-vip',
        description: 'Premium blackjack table for high rollers',
        scrapedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        isLive: true,
        mobileCompatible: true,
        liveChat: true,
        features: ['live dealer', 'vip', 'high stakes'],
        stats: {
          rtp: [99.29]
        }
      }
    ];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MongoDB
   */
  isMongoAvailable() {
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ
    console.log('üìä Using mock data for API testing (MongoDB disabled)');
    return false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–∑–∏–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   * @param {Number} limit - –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * @param {Object} filters - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @returns {Promise<Array>} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –∫–∞–∑–∏–Ω–æ
   */
  async getTopRatedCasinos(limit = 10, filters = {}) {
    try {
      const isMongoAvailable = this.isMongoAvailable();
      
      if (isMongoAvailable) {
        const minScore = filters.minScore || 8;
        const casinos = await this.repository.findTopRated(limit, minScore);
        return this.formatCasinosForResponse(casinos);
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        const minScore = filters.minScore || 8;
        const filteredCasinos = this.mockData
          .filter(casino => casino.score >= minScore)
          .sort((a, b) => b.score - a.score)
          .slice(0, limit);
        
        return this.formatCasinosForResponse(filteredCasinos);
      }
    } catch (error) {
      throw new Error(`Failed to get top rated casinos: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ –ø–æ —Ç–∏–ø—É –∏–≥—Ä—ã
   * @param {String} type - –¢–∏–ø –∏–≥—Ä—ã
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ –ø–æ —Ç–∏–ø—É
   */
  async getCasinosByType(type, options = {}) {
    try {
      const isMongoAvailable = this.isMongoAvailable();
      const limit = options.limit || 20;
      
      if (isMongoAvailable) {
        const casinos = await this.repository.findByType(type, limit);
        return this.formatCasinosForResponse(casinos);
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        const filteredCasinos = this.mockData
          .filter(casino => casino.type === type)
          .slice(0, limit);
        
        return this.formatCasinosForResponse(filteredCasinos);
      }
    } catch (error) {
      throw new Error(`Failed to get casinos by type: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –∏–≥—Ä
   * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä
   */
  async getLiveGames(options = {}) {
    try {
      const isMongoAvailable = this.isMongoAvailable();
      const limit = options.limit || 50;
      
      if (isMongoAvailable) {
        const games = await this.repository.findLiveGames(limit);
        return this.formatCasinosForResponse(games);
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        const liveGames = this.mockData
          .filter(casino => casino.isLive === true)
          .slice(0, limit);
        
        return this.formatCasinosForResponse(liveGames);
      }
    } catch (error) {
      throw new Error(`Failed to get live games: ${error.message}`);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞–∑–∏–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
   * @param {String} casinoId - ID –∫–∞–∑–∏–Ω–æ
   * @param {Number} newScore - –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
   * @param {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–∞–∑–∏–Ω–æ
   */
  async updateCasinoScore(casinoId, newScore, metadata = {}) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
      this.validateScore(newScore);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const casino = await this.repository.findById(casinoId);
      if (!casino) {
        throw new Error('Casino not found');
      }
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      const oldScore = casino.score;
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const updateData = {
        score: newScore,
        lastUpdated: new Date(),
        rating: this.calculateRating(newScore)
      };
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (metadata.reason) {
        updateData.metadata = {
          ...casino.metadata,
          lastScoreUpdate: {
            oldScore,
            newScore,
            reason: metadata.reason,
            updatedAt: new Date(),
            updatedBy: metadata.updatedBy
          }
        };
      }
      
      const updatedCasino = await this.repository.findByIdAndUpdate(casinoId, updateData);
      
      return this.formatCasinoForResponse(updatedCasino);
    } catch (error) {
      throw new Error(`Failed to update casino score: ${error.message}`);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–∞–∑–∏–Ω–æ
   * @param {String} casinoId - ID –∫–∞–∑–∏–Ω–æ
   * @param {String} feature - –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–∞–∑–∏–Ω–æ
   */
  async addFeatureToCasino(casinoId, feature) {
    try {
      const casino = await this.repository.findById(casinoId);
      if (!casino) {
        throw new Error('Casino not found');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (casino.features.includes(feature)) {
        throw new Error('Feature already exists');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
      if (casino.features.length >= 20) {
        throw new Error('Maximum features limit reached');
      }
      
      const updateData = {
        $push: { features: feature },
        lastUpdated: new Date()
      };
      
      const updatedCasino = await this.repository.findByIdAndUpdate(casinoId, updateData);
      
      return this.formatCasinoForResponse(updatedCasino);
    } catch (error) {
      throw new Error(`Failed to add feature: ${error.message}`);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞–∑–∏–Ω–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
   * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async searchCasinos(filters = {}, options = {}) {
    try {
      console.log('üîç searchCasinos called with filters:', filters);
      const isMongoAvailable = this.isMongoAvailable();
      
      if (isMongoAvailable) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB
        const {
          type,
          provider,
          rating,
          isLive,
          mobileCompatible,
          liveChat,
          minScore,
          maxScore,
          searchTerm
        } = filters;
        
        const {
          page = 1,
          limit = 20,
          sortBy = 'score',
          sortOrder = 'desc'
        } = options;
        
        let casinos = [];
        
        // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        if (searchTerm) {
          casinos = await this.repository.searchByText(searchTerm, limit * page);
        } else {
          // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
          const dbFilter = {};
          
          if (type) dbFilter.type = type;
          if (provider) dbFilter.provider = provider;
          if (rating) dbFilter.rating = rating;
          if (isLive !== undefined) dbFilter.isLive = isLive;
          if (mobileCompatible !== undefined) dbFilter.mobileCompatible = mobileCompatible;
          if (liveChat !== undefined) dbFilter.liveChat = liveChat;
          
          if (minScore !== undefined || maxScore !== undefined) {
            dbFilter.score = {};
            if (minScore !== undefined) dbFilter.score.$gte = minScore;
            if (maxScore !== undefined) dbFilter.score.$lte = maxScore;
          }
          
          // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          const sortOptions = {};
          sortOptions[sortBy] = sortOrder === 'desc' ? -1 : 1;
          
          casinos = await this.repository.find(dbFilter, {
            sort: sortOptions,
            limit: limit,
            skip: (page - 1) * limit
          });
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const total = await this.repository.count(filters);
        
        return {
          casinos: this.formatCasinosForResponse(casinos),
          pagination: {
            page,
            limit,
            total,
            pages: Math.ceil(total / limit)
          }
        };
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        const {
          type,
          provider,
          rating,
          isLive,
          mobileCompatible,
          liveChat,
          minScore,
          maxScore,
          searchTerm
        } = filters;
        
        const {
          page = 1,
          limit = 20,
          sortBy = 'score',
          sortOrder = 'desc'
        } = options;
        
        let casinos = [...this.mockData];
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (type) {
          casinos = casinos.filter(c => c.type === type);
        }
        if (provider) {
          casinos = casinos.filter(c => c.provider === provider);
        }
        if (rating) {
          casinos = casinos.filter(c => c.rating === rating);
        }
        if (isLive !== undefined) {
          casinos = casinos.filter(c => c.isLive === isLive);
        }
        if (mobileCompatible !== undefined) {
          casinos = casinos.filter(c => c.mobileCompatible === mobileCompatible);
        }
        if (liveChat !== undefined) {
          casinos = casinos.filter(c => c.liveChat === liveChat);
        }
        if (minScore !== undefined) {
          casinos = casinos.filter(c => c.score >= minScore);
        }
        if (maxScore !== undefined) {
          casinos = casinos.filter(c => c.score <= maxScore);
        }
        if (searchTerm) {
          const term = searchTerm.toLowerCase();
          casinos = casinos.filter(c => 
            c.name.toLowerCase().includes(term) ||
            c.description.toLowerCase().includes(term) ||
            c.provider.toLowerCase().includes(term)
          );
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        casinos.sort((a, b) => {
          let aVal = a[sortBy] || 0;
          let bVal = b[sortBy] || 0;
          
          if (typeof aVal === 'string') {
            aVal = aVal.toLowerCase();
            bVal = bVal.toLowerCase();
          }
          
          if (sortOrder === 'desc') {
            return bVal > aVal ? 1 : -1;
          } else {
            return aVal > bVal ? 1 : -1;
          }
        });
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const total = casinos.length;
        const startIndex = (page - 1) * limit;
        const paginatedCasinos = casinos.slice(startIndex, startIndex + limit);
        
        return {
          casinos: this.formatCasinosForResponse(paginatedCasinos),
          pagination: {
            page,
            limit,
            total,
            pages: Math.ceil(total / limit)
          }
        };
      }
    } catch (error) {
      throw new Error(`Failed to search casinos: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ –ø–æ ID
   * @param {String} id - ID –∫–∞–∑–∏–Ω–æ
   * @returns {Promise<Object|null>} –ö–∞–∑–∏–Ω–æ –∏–ª–∏ null
   */
  async findById(id) {
    try {
      console.log(`üîç findById called with id: ${id}`);
      const isMongoAvailable = this.isMongoAvailable();
      
      if (isMongoAvailable) {
        return await this.repository.findById(id);
      } else {
        // Fallback: –ø–æ–∏—Å–∫ –≤ mock –¥–∞–Ω–Ω—ã—Ö
        console.log('üìä Using mock data for findById');
        const result = this.mockData.find(casino => casino._id === id) || null;
        console.log(`üéØ Found casino: ${result ? result.name : 'not found'}`);
        return result;
      }
    } catch (error) {
      console.log('üìä Using mock data for findById due to error:', error.message);
      return this.mockData.find(casino => casino._id === id) || null;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
   * @param {Number} score - –û—Ü–µ–Ω–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @throws {Error} –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateScore(score) {
    if (typeof score !== 'number') {
      throw new Error('Score must be a number');
    }
    
    if (score < 0 || score > 10) {
      throw new Error('Score must be between 0 and 10');
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
   * @param {Number} score - –ß–∏—Å–ª–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
   * @returns {String} –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
   */
  calculateRating(score) {
    if (score >= 9) return 'Excellent';
    if (score >= 7.5) return 'Very Good';
    if (score >= 6) return 'Good';
    if (score >= 4) return 'Fair';
    return 'Poor';
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   * @param {Object} casino - –û–±—ä–µ–∫—Ç –∫–∞–∑–∏–Ω–æ
   * @param {boolean} detailed - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π DTO
   * @returns {Object} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
   */
  formatCasinoForResponse(casino, detailed = false) {
    if (!casino) return null;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DTO –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (detailed) {
      return new CasinoDetailDto(casino);
    } else {
      return new CasinoListDto(casino);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∫–∞–∑–∏–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   * @param {Array} casinos - –ú–∞—Å—Å–∏–≤ –∫–∞–∑–∏–Ω–æ
   * @param {boolean} detailed - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π DTO
   * @returns {Array} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
   */
  formatCasinosForResponse(casinos, detailed = false) {
    return casinos.map(casino => this.formatCasinoForResponse(casino, detailed));
  }

  /**
   * –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω—è—Ö
   * @param {Date} date - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
   * @returns {Number} –í–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö
   */
  calculateAgeInDays(date) {
    return Math.floor((Date.now() - date.getTime()) / (1000 * 60 * 60 * 24));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
   * @param {Date} date - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param {Number} maxDays - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @returns {Boolean} –ë—ã–ª–∞ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
   */
  isRecentlyUpdated(date, maxDays = 7) {
    return this.calculateAgeInDays(date) <= maxDays;
  }
}

module.exports = CasinoScoreService;

