const puppeteer = require('puppeteer');

class BaseGameScraper {
  constructor(gameConfig) {
    this.gameConfig = gameConfig;
    this.browser = null;
    this.page = null;
    this.startTime = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Puppeteer —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   */
  async initialize() {
    try {
      this.startTime = Date.now();
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
      this.browser = await puppeteer.launch({
        headless: process.env.PUPPETEER_HEADLESS === 'true' ? 'new' : false,
        args: [
          // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-field-trial-config',
          '--disable-ipc-flooding-protection',
          
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏
          '--disable-background-networking',
          '--disable-default-apps',
          '--disable-extensions',
          '--disable-sync',
          '--disable-translate',
          
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
          '--disable-background-timer-throttling',
          '--disable-renderer-backgrounding',
          '--disable-backgrounding-occluded-windows',
          '--disable-hang-monitor',
          '--disable-ipc-flooding-protection',
          
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
          '--no-default-browser-check',
          '--no-experiments',
          '--no-pings'
        ],
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ignoreDefaultArgs: ['--disable-extensions'],
        timeout: parseInt(process.env.PUPPETEER_TIMEOUT) || 30000
      });

      this.page = await this.browser.newPage();
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      await this.page.setViewport({ width: 1920, height: 1080 });

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      await this.page.setExtraHTTPHeaders({
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Upgrade-Insecure-Requests': '1'
      });

      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–∞–π—Ç–∞–º–∏

      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.page.evaluateOnNewDocument(() => {
        // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ API
        delete navigator.serviceWorker;
        delete navigator.webdriver;
        
        // –≠–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        Object.defineProperty(navigator, 'webdriver', {
          get: () => undefined,
        });
      });

      const initTime = Date.now() - this.startTime;
      console.log(`‚úÖ Puppeteer initialized for ${this.gameConfig.name} in ${initTime}ms`);
      
    } catch (error) {
      console.error(`‚ùå Error initializing Puppeteer for ${this.gameConfig.name}:`, error);
      throw error;
    }
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç frame detach
   */
  async navigateToPage() {
    const maxRetries = 3;
    let lastError;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const url = this.gameConfig.url || process.env.CASINO_SCORES_URL || 'https://casinoscores.com/';
        console.log(`üåê Attempt ${attempt}/${maxRetries}: Navigating to: ${url}`);
        
        const navigationStart = Date.now();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if (attempt > 1) {
          await this.page.waitForTimeout(2000);
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π frame detach
        await this.page.goto(url, { 
          waitUntil: 'domcontentloaded', // –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
          timeout: parseInt(process.env.PUPPETEER_TIMEOUT) || 60000
        });

        const navigationTime = Date.now() - navigationStart;
        console.log(`‚úÖ Page loaded successfully in ${navigationTime}ms on attempt ${attempt}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await this.page.waitForTimeout(3000);
        
        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        break;
        
      } catch (error) {
        lastError = error;
        console.error(`‚ùå Navigation attempt ${attempt} failed for ${this.gameConfig.name}:`, error.message);
        
        if (attempt < maxRetries) {
          console.log(`‚è≥ Waiting before retry attempt ${attempt + 1}...`);
          await this.page.waitForTimeout(5000);
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    if (lastError) {
      console.error(`‚ùå All navigation attempts failed for ${this.gameConfig.name}`);
      throw lastError;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try {
      const pageTitle = await this.page.title();
      console.log(`üìÑ Page title: ${pageTitle}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  Could not get page title: ${error.message}`);
    }

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    if (process.env.NODE_ENV === 'development') {
      try {
        const screenshotPath = `debug-${this.gameConfig.key}-screenshot.png`;
        await this.page.screenshot({ 
          path: screenshotPath, 
          fullPage: false, // –¢–æ–ª—å–∫–æ –≤–∏–¥–∏–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
          optimizeForSpeed: true
        });
        console.log(`üì∏ Screenshot saved as ${screenshotPath}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Could not take screenshot: ${error.message}`);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    try {
      const pageContent = await this.page.content();
      console.log(`üìä Page content length: ${pageContent.length} characters`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  Could not get page content: ${error.message}`);
    }
  }

  /**
   * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
   */
  async scrapeGameData() {
    throw new Error('scrapeGameData method must be implemented in child class');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å fallback —Ä–µ–∂–∏–º–æ–º
   * @param {Array} games - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
   * @returns {Promise<Array>} –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
   */
  async saveToDatabase(games) {
    try {
      console.log(`üíæ Attempting to save ${this.gameConfig.name} to database...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { connectDB, isDBConnected } = require('../config/database');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
      if (!isDBConnected()) {
        console.log('üîó Database not connected, attempting to connect...');
        try {
          await connectDB();
        } catch (connectError) {
          console.warn('‚ö†Ô∏è  Failed to connect to database, running in fallback mode');
          return this.handleFallbackMode(games);
        }
      }
      
      // –ï—Å–ª–∏ –ë–î –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (!isDBConnected()) {
        console.warn('‚ö†Ô∏è  Database still not available, running in fallback mode');
        return this.handleFallbackMode(games);
      }
      
      const CasinoScore = require('../models/CasinoScore');
      const savedGames = [];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º bulk –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const bulkOps = [];
      
      for (const game of games) {
        try {
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          const gameData = {
            ...game,
            scrapedAt: new Date()
          };

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è
          bulkOps.push({
            updateOne: {
              filter: { name: game.name },
              update: { $set: gameData },
              upsert: true
            }
          });
          
        } catch (error) {
          console.error(`‚ùå Error preparing ${this.gameConfig.name} for save:`, error);
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º bulk –æ–ø–µ—Ä–∞—Ü–∏—é
      if (bulkOps.length > 0) {
        const result = await CasinoScore.bulkWrite(bulkOps, { 
          ordered: false, // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
          writeConcern: { w: 1 } // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        });
        
        console.log(`‚úÖ Bulk operation completed: ${result.upsertedCount} created, ${result.modifiedCount} updated`);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        const savedRecords = await CasinoScore.find({ 
          name: { $in: games.map(g => g.name) } 
        }).sort({ scrapedAt: -1 });
        
        savedGames.push(...savedRecords);
      }

      const saveTime = Date.now() - this.startTime;
      console.log(`‚úÖ Successfully saved/updated ${savedGames.length} ${this.gameConfig.name} records in ${saveTime}ms`);
      return savedGames;

    } catch (error) {
      console.error('‚ùå Error saving to database, falling back to no-save mode:', error);
      return this.handleFallbackMode(games);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ fallback —Ä–µ–∂–∏–º–∞ –∫–æ–≥–¥–∞ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
   * @param {Array} games - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
   * @returns {Array} –î–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
   */
  handleFallbackMode(games) {
    console.log(`üìä Running in fallback mode - data will not be saved to database`);
    console.log(`‚úÖ Successfully scraped ${games.length} ${this.gameConfig.name} records`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
    const processedGames = games.map(game => ({
      ...game,
      scrapedAt: new Date(),
      savedToDatabase: false,
      fallbackMode: true
    }));
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (processedGames.length > 0) {
      console.log(`üìã Scraped games:`);
      processedGames.forEach((game, index) => {
        console.log(`  ${index + 1}. ${game.name} (${game.type})`);
      });
    }
    
    return processedGames;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
   * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
   */
  async scrapeAndSave() {
    try {
      console.log(`üöÄ Starting optimized scraping for ${this.gameConfig.name}...`);
      
      await this.initialize();
      await this.navigateToPage();
      
      const scrapeStart = Date.now();
      const games = await this.scrapeGameData();
      const scrapeTime = Date.now() - scrapeStart;
      
      console.log(`üìä Scraped ${games.length} games in ${scrapeTime}ms`);
      
      const savedGames = await this.saveToDatabase(games);
      
      const totalTime = Date.now() - this.startTime;
      console.log(`‚úÖ Scraping completed successfully for ${this.gameConfig.name} in ${totalTime}ms`);
      console.log(`üìà Processed ${savedGames.length} records`);
      
      return savedGames;
      
    } catch (error) {
      console.error(`‚ùå Error in scrapeAndSave for ${this.gameConfig.name}:`, error);
      throw error;
    } finally {
      await this.close();
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  async close() {
    try {
      if (this.browser) {
        await this.browser.close();
        console.log(`üîí Browser closed for ${this.gameConfig.name}`);
      }
    } catch (error) {
      console.error(`‚ùå Error closing browser for ${this.gameConfig.name}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * @returns {Promise<Object>} –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async getPerformanceMetrics() {
    if (!this.page) {
      return null;
    }

    try {
      const metrics = await this.page.metrics();
      const performance = await this.page.evaluate(() => {
        const perf = performance.getEntriesByType('navigation')[0];
        return {
          domContentLoaded: perf.domContentLoadedEventEnd - perf.domContentLoadedEventStart,
          loadComplete: perf.loadEventEnd - perf.loadEventStart,
          domInteractive: perf.domInteractive - perf.fetchStart,
          redirectCount: perf.redirectCount,
          transferSize: perf.transferSize
        };
      });

      return {
        puppeteerMetrics: metrics,
        performanceMetrics: performance,
        totalTime: this.startTime ? Date.now() - this.startTime : null
      };
    } catch (error) {
      console.error('‚ùå Error getting performance metrics:', error);
      return null;
    }
  }
}

module.exports = BaseGameScraper;
