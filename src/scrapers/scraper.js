require('dotenv').config();
const { connectDB } = require('./config/database');
const UniversalScraper = require('./universal-scraper');

async function main() {
  try {
    console.log('üöÄ Starting Casino Games Scraper...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    try {
      await connectDB();
      console.log('‚úÖ Database connected successfully');
    } catch (dbError) {
      console.warn('‚ö†Ô∏è  Database connection failed, continuing in fallback mode...');
      console.warn('üìä Scraping will work but data will not be saved to database');
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–µ–π–ø–µ—Ä–∞
    const scraper = new UniversalScraper();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä–∞—Ö
    const gamesInfo = scraper.getSupportedGamesInfo();
    console.log(`üìã Supported games: ${gamesInfo.totalGames}`);
    console.log(`üîß Available scrapers: ${gamesInfo.availableScrapers}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
    console.log('\nüéÆ Games status:');
    gamesInfo.games.forEach(game => {
      const status = game.hasScraper ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${game.name} (${game.key}) - ${game.type} by ${game.provider}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    let gameKey = args[0];
    let gameType = args[1];
    
    if (gameKey && gameKey !== 'all' && gameKey !== 'type') {
      // –°–∫—Ä–µ–π–ø–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
      console.log(`\nüéØ Scraping specific game: ${gameKey}`);
      const results = await scraper.scrapeGame(gameKey);
      
      console.log(`‚úÖ Scraping completed successfully!`);
      console.log(`üìà Processed ${results.length} records for ${gameKey}`);
      
      // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (results.length > 0) {
        const avgScore = results.reduce((sum, game) => sum + (game.score || 0), 0) / results.length;
        const topGame = results.reduce((top, game) => 
          (game.score || 0) > (top.score || 0) ? game : top
        );
        
        console.log(`üìä Average score: ${avgScore.toFixed(2)}/10`);
        console.log(`üèÜ Top game: ${topGame.name} (${topGame.score}/10)`);
      }
      
    } else if (gameType && args[0] === 'type') {
      // –°–∫—Ä–µ–π–ø–∏–Ω–≥ –∏–≥—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
      console.log(`\nüéØ Scraping games of type: ${gameType}`);
      const results = await scraper.scrapeGamesByType(gameType);
      
      console.log(`‚úÖ Scraping completed successfully!`);
      console.log(`üìà Summary: ${results.summary.successfulGames} successful, ${results.summary.failedGames} failed`);
      
      // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ
      Object.entries(results.results).forEach(([gameKey, result]) => {
        console.log(`  ‚úÖ ${gameKey}: ${result.count} records`);
      });
      
      if (Object.keys(results.errors).length > 0) {
        Object.entries(results.errors).forEach(([gameKey, error]) => {
          console.log(`  ‚ùå ${gameKey}: ${error.error}`);
        });
      }
      
    } else {
      // –°–∫—Ä–µ–π–ø–∏–Ω–≥ –≤—Å–µ—Ö –∏–≥—Ä
      console.log(`\nüéØ Scraping all available games...`);
      const results = await scraper.scrapeAllGames();
      
      console.log(`‚úÖ Universal scraping completed successfully!`);
      console.log(`üìà Summary: ${results.summary.successfulGames} successful, ${results.summary.failedGames} failed`);
      console.log(`üìä Total records processed: ${results.summary.totalProcessed}`);
      
      // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ
      if (Object.keys(results.results).length > 0) {
        console.log('\nüéÆ Successful games:');
        Object.entries(results.results).forEach(([gameKey, result]) => {
          console.log(`  ‚úÖ ${gameKey}: ${result.count} records`);
        });
      }
      
      if (Object.keys(results.errors).length > 0) {
        console.log('\n‚ö†Ô∏è  Failed games:');
        Object.entries(results.errors).forEach(([gameKey, error]) => {
          console.log(`  ‚ùå ${gameKey}: ${error.error}`);
        });
      }
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Error during scraping:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Received SIGTERM, shutting down gracefully...');
  process.exit(0);
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
function showUsage() {
  console.log('\nüìñ Usage:');
  console.log('  node src/scraper.js                    - Scrape all available games');
  console.log('  node src/scraper.js <game-key>         - Scrape specific game');
  console.log('  node src/scraper.js type <game-type>   - Scrape games by type');
  console.log('\nüéÆ Available game keys:');
  console.log('  crazy-time, monopoly-live, deal-or-no-deal, lightning-roulette, blackjack-live, baccarat-live');
  console.log('\nüéØ Available game types:');
  console.log('  game show, roulette, blackjack, baccarat');
  console.log('\nüí° Examples:');
  console.log('  node src/scraper.js crazy-time');
  console.log('  node src/scraper.js type "game show"');
  console.log('  node src/scraper.js all');
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showUsage();
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
