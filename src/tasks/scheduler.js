const cron = require('node-cron');
const UniversalScraper = require('../services/universal-scraper');
const CasinoScore = require('../models/CasinoScore');

class TaskScheduler {
  constructor() {
    this.jobs = new Map();
    this.scraper = new UniversalScraper();
    this.isRunning = false;
    this.stats = {
      totalRuns: 0,
      successfulRuns: 0,
      failedRuns: 0,
      lastRun: null,
      lastSuccess: null,
      lastError: null,
      averageExecutionTime: 0
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
   * @param {string} schedule - Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '* * * * *' –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã)
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  createScrapingJob(schedule = '* * * * *', options = {}) {
    const {
      name = 'casino-scraping',
      timezone = 'UTC',
      runOnInit = false,
      errorHandler = null,
      onComplete = null
    } = options;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.jobs.has(name)) {
      this.stopJob(name);
    }

    const job = cron.schedule(schedule, async () => {
      await this.executeScrapingTask(name);
    }, {
      scheduled: true,
      timezone,
      runOnInit
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    if (errorHandler) {
      job.on('error', errorHandler);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (onComplete) {
      job.on('complete', onComplete);
    }

    this.jobs.set(name, {
      job,
      schedule,
      timezone,
      runOnInit,
      createdAt: new Date(),
      lastExecution: null,
      nextExecution: this.getNextExecutionTime(schedule, timezone)
    });

    console.log(`‚úÖ Task "${name}" scheduled with cron: ${schedule}`);
    return job;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
   * @param {string} jobName - –ò–º—è –∑–∞–¥–∞—á–∏
   */
  async executeScrapingTask(jobName) {
    if (this.isRunning) {
      console.log(`‚è≥ Previous scraping job is still running, skipping "${jobName}"...`);
      return;
    }

    const startTime = Date.now();
    this.isRunning = true;
    this.stats.totalRuns++;

    try {
      console.log(`üöÄ [${new Date().toISOString()}] Starting scraping task: ${jobName}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
      const jobInfo = this.jobs.get(jobName);
      if (jobInfo) {
        jobInfo.lastExecution = new Date();
        jobInfo.nextExecution = this.getNextExecutionTime(jobInfo.schedule, jobInfo.timezone);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–µ–π–ø–∏–Ω–≥ –≤—Å–µ—Ö –∏–≥—Ä
      const results = await this.scraper.scrapeAllGames();
      
      const executionTime = Date.now() - startTime;
      this.stats.successfulRuns++;
      this.stats.lastSuccess = new Date();
      this.stats.lastRun = new Date();
      this.stats.averageExecutionTime = this.calculateAverageExecutionTime(executionTime);

      console.log(`‚úÖ [${new Date().toISOString()}] Task "${jobName}" completed successfully`);
      console.log(`üìä Processed ${results.summary.totalProcessed} records from ${results.summary.successfulGames} games in ${executionTime}ms`);
      console.log(`üìà Average execution time: ${this.stats.averageExecutionTime.toFixed(2)}ms`);

      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.logTaskExecution(jobName, {
        status: 'success',
        executionTime,
        processedItems: results.summary.totalProcessed,
        timestamp: new Date()
      });

    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.stats.failedRuns++;
      this.stats.lastError = error.message;
      this.stats.lastRun = new Date();

      console.error(`‚ùå [${new Date().toISOString()}] Task "${jobName}" failed:`, error.message);
      console.error(`‚è±Ô∏è Execution time: ${executionTime}ms`);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await this.logTaskExecution(jobName, {
        status: 'error',
        executionTime,
        error: error.message,
        timestamp: new Date()
      });
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ–¥–∏–Ω —Ä–∞–∑
   * @param {string} jobName - –ò–º—è –∑–∞–¥–∞—á–∏
   */
  async runJobOnce(jobName) {
    console.log(`üéØ Running task "${jobName}" once...`);
    await this.executeScrapingTask(jobName);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
   * @param {string} jobName - –ò–º—è –∑–∞–¥–∞—á–∏
   */
  stopJob(jobName) {
    const jobInfo = this.jobs.get(jobName);
    if (jobInfo) {
      jobInfo.job.stop();
      this.jobs.delete(jobName);
      console.log(`üõë Task "${jobName}" stopped`);
    } else {
      console.log(`‚ö†Ô∏è Task "${jobName}" not found`);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
   */
  stopAllJobs() {
    console.log('üõë Stopping all scheduled tasks...');
    this.jobs.forEach((jobInfo, jobName) => {
      jobInfo.job.stop();
    });
    this.jobs.clear();
    console.log('‚úÖ All tasks stopped');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á
   */
  getJobsStatus() {
    const status = {
      totalJobs: this.jobs.size,
      activeJobs: 0,
      jobs: [],
      stats: this.stats,
      isRunning: this.isRunning
    };

    this.jobs.forEach((jobInfo, jobName) => {
      const jobStatus = {
        name: jobName,
        schedule: jobInfo.schedule,
        timezone: jobInfo.timezone,
        isActive: jobInfo.job.running,
        createdAt: jobInfo.createdAt,
        lastExecution: jobInfo.lastExecution,
        nextExecution: jobInfo.nextExecution
      };

      status.jobs.push(jobStatus);
      if (jobInfo.job.running) {
        status.activeJobs++;
      }
    });

    return status;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param {string} schedule - Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
   * @param {string} timezone - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
   */
  getNextExecutionTime(schedule, timezone = 'UTC') {
    try {
      const now = new Date();
      const nextMinute = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes() + 1, 0, 0);
      return nextMinute;
    } catch (error) {
      console.error('Error calculating next execution time:', error);
      return null;
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param {number} currentExecutionTime - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  calculateAverageExecutionTime(currentExecutionTime) {
    const totalRuns = this.stats.successfulRuns + this.stats.failedRuns;
    if (totalRuns === 0) return currentExecutionTime;
    
    const currentAverage = this.stats.averageExecutionTime;
    return (currentAverage * (totalRuns - 1) + currentExecutionTime) / totalRuns;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param {string} jobName - –ò–º—è –∑–∞–¥–∞—á–∏
   * @param {Object} executionData - –î–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async logTaskExecution(jobName, executionData) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å TaskExecution
      console.log(`üìù Task execution logged: ${jobName} - ${executionData.status}`);
    } catch (error) {
      console.error('Error logging task execution:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
   */
  async getScrapingStats() {
    try {
      const [
        totalCasinos,
        averageScore,
        ratingStats,
        latestUpdate
      ] = await Promise.all([
        CasinoScore.countDocuments(),
        CasinoScore.aggregate([
          { $group: { _id: null, avgScore: { $avg: '$score' } } }
        ]),
        CasinoScore.aggregate([
          { $group: { _id: '$rating', count: { $sum: 1 } } }
        ]),
        CasinoScore.findOne().sort('-scrapedAt').select('scrapedAt')
      ]);

      return {
        totalCasinos,
        averageScore: averageScore[0]?.avgScore || 0,
        ratingDistribution: ratingStats.reduce((acc, stat) => {
          acc[stat._id] = stat.count;
          return acc;
        }, {}),
        lastUpdated: latestUpdate?.scrapedAt || null,
        schedulerStats: this.stats
      };
    } catch (error) {
      console.error('Error getting scraping stats:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param {number} daysToKeep - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanupOldData(daysToKeep = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      const result = await CasinoScore.deleteMany({
        scrapedAt: { $lt: cutoffDate }
      });

      console.log(`üßπ Cleaned up ${result.deletedCount} old casino records`);
      return result.deletedCount;
    } catch (error) {
      console.error('Error cleaning up old data:', error);
      throw error;
    }
  }
}

module.exports = TaskScheduler;
