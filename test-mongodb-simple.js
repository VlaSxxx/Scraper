require('dotenv').config({ path: './config.env' });
const mongoose = require('mongoose');

async function testMongoDBSimple() {
  console.log('üîç Testing MongoDB connection (simple)...');
  console.log('MongoDB URI:', process.env.MONGODB_URI || 'mongodb://localhost:27017/casino-scores');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/casino-scores', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000, // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
    
    console.log(`‚úÖ MongoDB Connected: ${conn.connection.host}`);
    console.log(`üìä Database: ${conn.connection.name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await conn.connection.db.listCollections().toArray();
    console.log('üìã Collections:', collections.map(c => c.name));
    
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error.message);
    
    if (error.name === 'MongoNetworkError') {
      console.log('\nüí° MongoDB is not running. Please:');
      console.log('   1. Install MongoDB: https://www.mongodb.com/try/download/community');
      console.log('   2. Or use Docker: docker run -d -p 27017:27017 --name mongodb mongo:latest');
      console.log('   3. Or use MongoDB Atlas (cloud): https://www.mongodb.com/atlas');
    } else if (error.message.includes('authentication')) {
      console.log('\nüí° MongoDB requires authentication. Please:');
      console.log('   1. Check your MONGODB_URI in .env file');
      console.log('   2. Or use MongoDB without auth: mongod --noauth');
    }
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('üîå MongoDB connection closed');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMongoDBSimple();
