const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê MONGODB ATLAS');
console.log('=' * 40);
console.log('');
console.log('1. –í Atlas –Ω–∞–∂–º–∏—Ç–µ "Connect" —Ä—è–¥–æ–º —Å Cluster0');
console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ "Connect your application"');
console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
console.log('');

rl.question('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Atlas (–∏–ª–∏ ENTER –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', (atlasUri) => {
  if (!atlasUri.trim()) {
    console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    rl.close();
    return;
  }
  
  if (!atlasUri.includes('mongodb+srv://') || !atlasUri.includes('mongodb.net')) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ Atlas');
    console.log('üí° –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å mongodb+srv:// –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å mongodb.net');
    rl.close();
    return;
  }
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π config.env
    let configContent = fs.readFileSync('config.env', 'utf8');
    
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    fs.writeFileSync('config.env.backup', configContent);
    console.log('üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: config.env.backup');
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const newContent = configContent.replace(
      /MONGODB_URI=.*/,
      `MONGODB_URI=${atlasUri}`
    );
    
    fs.writeFileSync('config.env', newContent);
    
    console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm start');
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: node test-atlas-connection.js');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  rl.close();
});
