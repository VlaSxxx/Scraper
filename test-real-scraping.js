const { connectDB } = require('./src/config/database');
const ScraperFactory = require('./src/services/scraper-factory');

async function testRealScraping() {
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê CRAZY TIME');
    console.log('=' * 50);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    console.log('üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–µ–π–ø–µ—Ä–∞...');
    const scraper = ScraperFactory.createScraper('crazy-time');
    
    console.log('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä–µ–π–ø–µ—Ä–∞:');
    console.log(`   üéÆ –ò–≥—Ä–∞: ${scraper.gameConfig.name}`);
    console.log(`   üåê URL: ${scraper.gameConfig.url}`);
    console.log(`   üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${scraper.gameConfig.provider}`);
    console.log(`   üéØ –¢–∏–ø: ${scraper.gameConfig.type}`);
    console.log('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.env
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Puppeteer:');
    console.log(`   üëÅÔ∏è Headless: ${process.env.PUPPETEER_HEADLESS}`);
    console.log(`   ‚è±Ô∏è Timeout: ${process.env.PUPPETEER_TIMEOUT}ms`);
    console.log(`   üõ°Ô∏è Stealth: ${process.env.PUPPETEER_STEALTH}`);
    console.log('');
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
    console.log('üí° –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    console.log('‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...');
    console.log('');
    
    const startTime = Date.now();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const results = await scraper.scrapeAndSave();
    
    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);
    
    console.log('');
    console.log('‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!');
    console.log('=' * 30);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${results.length}`);
    console.log('');
    
    if (results.length > 0) {
      console.log('üéÆ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      results.forEach((result, index) => {
        console.log(`\n   ${index + 1}. ${result.name}`);
        console.log(`      üìä –†–µ–π—Ç–∏–Ω–≥: ${result.score}/10`);
        console.log(`      üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${result.stats?.multiplier || 'N/A'}x`);
        console.log(`      üîÑ –†–∞—É–Ω–¥–æ–≤: ${result.stats?.rounds || 'N/A'}`);
        console.log(`      üåê URL: ${result.url}`);
        console.log(`      üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${result.description.substring(0, 100)}...`);
      });
      
      console.log('\nüéâ –£–°–ü–ï–•! –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
      console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API...');
      const http = require('http');
      
      const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/api/casinos?search=crazy',
        method: 'GET'
      };

      const req = http.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
          try {
            const parsed = JSON.parse(data);
            const apiCount = parsed.data?.casinos?.length || 0;
            console.log(`‚úÖ API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${apiCount} –∑–∞–ø–∏—Å–µ–π Crazy Time`);
            
            if (apiCount > 0) {
              console.log('üåê API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
            }
          } catch (error) {
            console.log('‚ö†Ô∏è API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)');
          }
        });
      });

      req.on('error', () => {
        console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)');
      });

      req.end();
      
    } else {
      console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ fallback —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
    }
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
    console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: node crazy-time-updater.js');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: curl http://localhost:3000/api/casinos');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
    console.error('\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
    console.error('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    console.error('   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º headless: PUPPETEER_HEADLESS=false');
    console.error('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å https://casinoscores.com/');
    
    process.exit(1);
  }
}

console.log('üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...\n');
testRealScraping();


