const { connectDB } = require('./src/config/database');
const CasinoScore = require('./src/models/CasinoScore');

async function viewDatabase() {
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    
    console.log('üìä –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–• –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('=' * 50);
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalRecords = await CasinoScore.countDocuments();
    const crazyTimeRecords = await CasinoScore.countDocuments({ name: /Crazy Time/i });
    
    console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`);
    console.log(`   üéÆ –ó–∞–ø–∏—Å–µ–π Crazy Time: ${crazyTimeRecords}`);
    console.log('');
    
    if (totalRecords === 0) {
      console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ —Å–Ω–∞—á–∞–ª–∞!');
      process.exit(0);
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è):');
    const latestRecords = await CasinoScore.find()
      .sort({ createdAt: -1 })
      .limit(5)
      .lean();
    
    latestRecords.forEach((record, index) => {
      const createdTime = new Date(record.createdAt).toLocaleString();
      const scrapedTime = record.scrapedAt ? new Date(record.scrapedAt).toLocaleString() : 'N/A';
      
      console.log(`\n   ${index + 1}. üìã ${record.name}`);
      console.log(`      üÜî ID: ${record._id}`);
      console.log(`      üìä –†–µ–π—Ç–∏–Ω–≥: ${record.score || 'N/A'}/10`);
      console.log(`      ‚≠ê –û—Ü–µ–Ω–∫–∞: ${record.rating || 'N/A'}`);
      console.log(`      üéØ –¢–∏–ø: ${record.type || 'N/A'}`);
      console.log(`      üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${record.provider || 'N/A'}`);
      console.log(`      üåê URL: ${record.url}`);
      console.log(`      üìÖ –°–æ–∑–¥–∞–Ω–æ: ${createdTime}`);
      console.log(`      üïê –ü–∞—Ä—Å–∏–Ω–≥: ${scrapedTime}`);
      
      if (record.stats) {
        console.log(`      üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        if (record.stats.multiplier) console.log(`         üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${record.stats.multiplier}x`);
        if (record.stats.rounds) console.log(`         üîÑ –†–∞—É–Ω–¥–æ–≤: ${record.stats.rounds}`);
        if (record.stats.lastUpdate) {
          const updateTime = new Date(record.stats.lastUpdate).toLocaleString();
          console.log(`         ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}`);
        }
      }
      
      if (record.features && record.features.length > 0) {
        console.log(`      üéÆ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${record.features.join(', ')}`);
      }
      
      if (record.description) {
        const shortDesc = record.description.length > 100 ? 
          record.description.substring(0, 100) + '...' : 
          record.description;
        console.log(`      üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${shortDesc}`);
      }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏–≥—Ä:');
    const typeStats = await CasinoScore.aggregate([
      { $group: { _id: '$type', count: { $sum: 1 }, avgScore: { $avg: '$score' } } },
      { $sort: { count: -1 } }
    ]);
    
    typeStats.forEach(stat => {
      const avgScore = stat.avgScore ? stat.avgScore.toFixed(1) : 'N/A';
      console.log(`   üéØ ${stat._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${stat.count} –∑–∞–ø–∏—Å–µ–π (—Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgScore}/10)`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    console.log('\nüè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:');
    const providerStats = await CasinoScore.aggregate([
      { $match: { provider: { $exists: true, $ne: null } } },
      { $group: { _id: '$provider', count: { $sum: 1 }, avgScore: { $avg: '$score' } } },
      { $sort: { count: -1 } }
    ]);
    
    providerStats.forEach(stat => {
      const avgScore = stat.avgScore ? stat.avgScore.toFixed(1) : 'N/A';
      console.log(`   üè¢ ${stat._id}: ${stat.count} –∑–∞–ø–∏—Å–µ–π (—Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgScore}/10)`);
    });
    
    // –ó–∞–ø–∏—Å–∏ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    console.log('\nüèÜ –¢–æ–ø-3 –∑–∞–ø–∏—Å–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:');
    const topRated = await CasinoScore.find({ score: { $exists: true, $ne: null } })
      .sort({ score: -1 })
      .limit(3)
      .lean();
    
    topRated.forEach((record, index) => {
      console.log(`   ${index + 1}. ${record.name} - ${record.score}/10 ‚≠ê`);
      if (record.stats?.multiplier) {
        console.log(`      üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${record.stats.multiplier}x`);
      }
    });
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    console.log('\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∏ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞):');
    const recentParsed = await CasinoScore.find({ scrapedAt: { $exists: true } })
      .sort({ scrapedAt: -1 })
      .limit(3)
      .lean();
    
    recentParsed.forEach((record, index) => {
      const scrapedTime = new Date(record.scrapedAt).toLocaleString();
      console.log(`   ${index + 1}. ${record.name} - ${scrapedTime}`);
    });
    
    console.log('\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:');
    console.log('   üì° API: curl http://localhost:3000/api/casinos');
    console.log('   üîç –ü–æ–∏—Å–∫: curl "http://localhost:3000/api/casinos?search=crazy"');
    console.log('   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: curl http://localhost:3000/api/stats');
    console.log('   üåê –ë—Ä–∞—É–∑–µ—Ä: http://localhost:3000/api/casinos');
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  }
}

console.log('üëÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
viewDatabase();


